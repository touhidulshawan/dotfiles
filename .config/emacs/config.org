#+TITLE: emacs config 
#+AUTHOR: Touhidul Shawan
#+DESCRIPTIONS: My GNU Emacs config file
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Table of Contents :toc:
- [[#load-scripts][load scripts]]
- [[#reload-emacs][reload emacs]]
- [[#editor][editor]]
  - [[#ui][ui]]
  - [[#font][font]]
  - [[#themes][themes]]
  - [[#line-number][line-number]]
  - [[#match-paren--auto-pair][match paren & auto pair]]
  - [[#backup--lock-file][backup & lock file]]
- [[#plugins][plugins]]
  - [[#evil-mode][evil-mode]]
  - [[#magit][magit]]
  - [[#avy][avy]]
  - [[#projectile][projectile]]
  - [[#dashboard][dashboard]]
  - [[#modeline][modeline]]
  - [[#dired][dired]]
  - [[#yasnippet][yasnippet]]
  - [[#marginalia][marginalia]]
  - [[#orderless][orderless]]
  - [[#vertico][vertico]]
  - [[#consult][consult]]
  - [[#corfu][corfu]]
  - [[#which-key][which key]]
- [[#keybindings][keybindings]]
  - [[#evil][evil]]
  - [[#jj-to-normal-mode][jj to normal mode]]
  - [[#space-as-leader-key][space as leader key]]
  - [[#help][help]]
  - [[#files][files]]
  - [[#buffer][buffer]]
  - [[#scratch-buffer][scratch buffer]]
  - [[#window][window]]
  - [[#avy-1][avy]]
  - [[#magit-1][magit]]
  - [[#snippet][snippet]]
  - [[#projectile-1][projectile]]
  - [[#org][org]]
  - [[#consult-1][consult]]
- [[#org-1][org]]
  - [[#improve-visual][improve visual]]
  - [[#interaction][interaction]]
  - [[#keyword][keyword]]
  - [[#tags-setting][tags setting]]
  - [[#priorities][priorities]]
  - [[#table-of-contents][table of contents]]
  - [[#org-modern][org-modern]]
  - [[#evil-org][evil-org]]
  - [[#org-tempo][org-tempo]]
  - [[#org-agenda][org-agenda]]
- [[#misc][misc]]
  - [[#diminish][diminish]]
  - [[#rainbow-mode][rainbow mode]]
  - [[#center-cursor][center cursor]]
  - [[#icon][icon]]
  - [[#utf-8][utf-8]]
  - [[#zoom][zoom]]
  - [[#transparency][transparency]]
  - [[#extra][extra]]
  - [[#improve-latex][improve latex]]

* load scripts
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.config/emacs/scripts")
  (require 'elpaca-setup)
#+end_src
* reload emacs
#+begin_src emacs-lisp
(defun reload-init-file ()
  (interactive)
  (load-file user-init-file)
  (load-file user-init-file))
#+end_src
* editor
** ui 
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
(setq use-short-answers t)
(setq confirm-kill-emacs 'yes-or-no-p)
(setq
 initial-major-mode 'org-mode
 initial-scratch-message ""
 initial-buffer-choice t) 
#+end_src
** font
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                    :font "JetBrains Mono"
                    :height 111
                    :weight 'medium)
(set-face-attribute 'variable-pitch nil
                    :font "Ubuntu"
                    :height 122
                    :weight 'medium)
(set-face-attribute 'fixed-pitch nil
                    :font "JetBrains Mono"
                    :height 111
                    :weight 'medium)
(set-face-attribute 'font-lock-comment-face nil :slant 'italic)

(set-face-attribute 'font-lock-keyword-face nil :slant 'italic)

(add-to-list
 'default-frame-alist '(font . "JetBrains Mono-13"))
#+end_src
** themes
*** ef-theme
#+begin_src emacs-lisp
  ;; (use-package ef-themes :config (load-theme 'ef-cherie t))
#+end_src
*** wombat
#+begin_src emacs-lisp
  ;; (load-theme 'wombat t)
#+end_src
*** doom-themes 
#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  (setq doom-themes-enable-bold t     
        doom-themes-enable-italic t)
  (load-theme 'doom-one t)

  (doom-themes-visual-bell-config)
  (doom-themes-org-config))
#+end_src

** line-number
#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(setq display-line-numbers-type 'relative)
(global-visual-line-mode t)
#+end_src
** match paren & auto pair
#+begin_src emacs-lisp
(show-paren-mode 1)
(electric-pair-mode 1)
#+end_src
** backup & lock file
*disable backup file*
#+begin_src emacs-lisp
(setq make-backup-files nil) 
#+end_src
*disable lock file*
#+begin_src emacs-lisp
(setq create-lockfiles nil)  
#+end_src
* plugins
** evil-mode
*** evil
#+begin_src emacs-lisp
(use-package evil
  :demand t
  :bind (("<escape>" . keyboard-escape-quit))
  :init
  (setq
   evil-want-integration t
   evil-want-keybinding nil
   evil-vsplit-window-right t
   evil-split-window-below t
   evil-search-module 'evil-search
   evil-want-keybinding nil
   evil-disable-insert-state-bindings t
   evil-want-Y-yank-to-eol t
   evil-undo-system 'undo-redo)
  (evil-mode)
  :config (evil-set-leader 'normal " ") (evil-mode 1))
#+end_src
*** evil-collection 
#+begin_src emacs-lisp
  (use-package evil-collection
  :after evil
  :config
  (setq evil-want-integration t)
  (evil-collection-init))
#+end_src
*** Evil commentary
#+begin_src emacs-lisp
  (use-package evil-commentary
    :ensure t
    :after evil
    :bind (:map evil-normal-state-map ("gc" . evil-commentary)))
#+end_src
*** Evil surround
#+begin_src emacs-lisp
  (use-package evil-surround
    :ensure t
    :after evil
    :config (global-evil-surround-mode 1))
#+end_src
** magit
#+begin_src emacs-lisp
(use-package magit :commands magit-status :ensure t)
#+end_src
** avy
#+begin_src emacs-lisp
(use-package avy
  :defer t
  :config
  (setq avy-case-fold-search nil))
#+end_src
** projectile
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :ensure t
    :config
    (projectile-mode)
    (setq projectile-completion-system 'auto)
    (setq projectile-project-search-path '("~/projects/")))
#+end_src
** dashboard
#+begin_src emacs-lisp
  (use-package
    dashboard
    :init
    (setq
     dashboard-set-heading-icons t
     dashboard-set-file-icons t
     dashboard-display-icons-p t
     ;; dashboard-startup-banner "~/.config/emacs/cover.png"
     dashboard-center-content nil
     dashboard-items '((recents . 8)))
    :config (dashboard-setup-startup-hook))
  (setq initial-buffer-choice
        (lambda () (get-buffer-create "*dashboard*")))
  (setq doom-fallback-buffer-name "*dashboard*")
#+end_src
** modeline
#+begin_src emacs-lisp
(use-package doom-modeline :ensure t :init (doom-modeline-mode 1))
#+end_src
** dired
#+begin_src emacs-lisp
(use-package dired-open
  :config
  (setq dired-open-extensions '(("gif" . "sxiv")
                                ("jpg" . "sxiv")
                                ("png" . "sxiv")
                                ("mkv" . "mpv")
                                ("mp4" . "mpv"))))

(use-package peep-dired
  :after dired
  :hook (evil-normalize-keymaps . peep-dired-hook)
  :config
  (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
  (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
  (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
  (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file)
  )
#+end_src
** yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :ensure t
    :hook (php-mode . yas-minor-mode)
    :init
    (setq yas-nippet-dir "~/.config/emacs/snippets")
    (yas-global-mode 1))
  (require 'warnings)
  (add-to-list 'warning-suppress-types '(yasnippet backquote-change))

  (use-package yasnippet-snippets :ensure t :after yasnippet)
#+end_src
** marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :bind (:map minibuffer-local-map
           ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
#+end_src
** orderless
#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src
** vertico
#+begin_src emacs-lisp
(use-package vertico
  :init
  ;; Enable vertico using the vertico-flat-mode
  (require 'vertico-directory)
  (add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy)
  (vertico-mode t)
  :config
  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))
(setq native-comp-deferred-compilation t)
#+end_src
** consult
#+begin_src emacs-lisp
(use-package consult)
#+end_src
** corfu
#+begin_src emacs-lisp 
  (use-package corfu
    :custom
    (corfu-auto t)
    :init
    (global-corfu-mode))
  (customize-set-variable 'text-mode-ispell-word-completion nil)
#+end_src
** which key
#+begin_src emacs-lisp
  (use-package which-key
  :init (which-key-mode 1)
  :config
  (setq
   which-key-side-window-location 'bottom
   which-key-sort-order #'which-key-key-order-alpha
   which-key-sort-uppercase-first nil
   which-key-add-column-padding 1
   which-key-max-display-columns nil
   which-key-min-display-lines 6
   which-key-side-window-slot -10
   which-key-side-window-max-height 0.25
   which-key-idle-delay 0.8
   which-key-max-description-length 25
   which-key-allow-imprecise-window-fit t
   which-key-prefix-prefix "◉ "
   which-key-separator " → "))
#+end_src
* keybindings
** evil
#+begin_src emacs-lisp
  (use-package
  general
  :config (general-evil-setup)
#+end_src
** jj to normal mode 
#+begin_src emacs-lisp
(general-imap
  "j" (general-key-dispatch 'self-insert-command
        :timeout 0.2 "j" 'evil-normal-state))
#+end_src
** space as leader key 
#+begin_src emacs-lisp
  (general-create-definer
  leader-key
  :states '(normal insert visual emacs)
  :keymaps 'override
  :prefix "SPC"
  :global-prefix "M-SPC")
#+end_src
** help
#+begin_src emacs-lisp
(leader-key
  "h" '(:ignore t :wk "Help")
  "h f" '(describe-function :wk "Describe function")
  "h v" '(describe-variable :wk "Describe variable")
  "h r r" '((lambda ()
              (interactive) (load-file "~/.config/emacs/init.el"))
            :wk "Reload emacs config"))
#+end_src
** files
#+begin_src emacs-lisp
(leader-key 
  "f" '(:ignore t :wk "Files")
  "." '(find-file :wk "Find file")
  "f f" '(find-file :wk "Find file")
  "f c" '((lambda ()
            (interactive)
            (find-file "~/.config/emacs/config.org"))
          :wk "Edit emacs config")
  "f s" '(save-buffer :wk "Save buffer")
  "f r" '(consult-recent-file :wk "Find recent files")
  "f q" '(kill-buffer :wk "Kill buffer"))
#+end_src
** buffer
#+begin_src emacs-lisp
(leader-key
  "b" '(:ignore t :wk "buffer")
  "b i" '(ibuffer :wk "Switch ibuffer")
  "b b" '(switch-to-buffer :wk "Switch buffer")
  "b k" '(kill-this-buffer :wk "Kill this buffer")
  "b n" '(next-buffer :wk "Next buffer")
  "b p" '(previous-buffer :wk "Previous buffer")
  "b r" '(revert-buffer :wk "Reload buffer"))
#+end_src
** scratch buffer
#+begin_src emacs-lisp
(leader-key "n" '(scratch-buffer :wk "Scratch Buffer"))
#+end_src
** window
#+begin_src emacs-lisp
(leader-key
  "w" '(:ignore t :wk "Windows")
  "w c" '(evil-window-delete :wk "Close window")
  "w n" '(evil-window-new :wk "New window")
  "w s" '(evil-window-split :wk "Horizontal split window")
  "w v" '(evil-window-vsplit :wk "Vertical split window")
  "w h" '(evil-window-left :wk "Window left")
  "w j" '(evil-window-down :wk "Window down")
  "w k" '(evil-window-up :wk "Window up")
  "w l" '(evil-window-right :wk "Window right")
  "w w" '(evil-window-next :wk "Goto next window")
  "w H" '(buf-move-left :wk "Buffer move left")
  "w J" '(buf-move-down :wk "Buffer move down")
  "w K" '(buf-move-up :wk "Buffer move up")
  "w L" '(buf-move-right :wk "Buffer move right"))
#+end_src
** avy
#+begin_src emacs-lisp
(leader-key
  "j" '(avy-goto-word-0 :wk "Go to word")
  "l" '(avy-goto-line :wk "Go to line"))
#+end_src
** magit
#+begin_src emacs-lisp
(leader-key
  "g" '(:ignore t :wk "magit")
  "g g" '(magit-status :wk "Magit Status"))
#+end_src
** snippet
#+begin_src emacs-lisp
(leader-key
  "i" '(:ignore t :wk "snippets")
  "s" '(yas-insert-snippet :wk "Yas insert snippet"))
#+end_src
** projectile
#+begin_src emacs-lisp
(leader-key
  "p" '(:ignore t :wk "Projectile")
  "p a" '(projectile-add-known-project :wk "Add project")
  "p p" '(projectile-switch-project :wk "Switch to project")
  "p f" '(projectile-find-file :wk "Project find file")
  "p d" '(projectile-remove-known-project :wk "Remove project"))
#+end_src
** org
#+begin_src emacs-lisp
(leader-key
  "m" '(:ignore t :wk "Org")
  "m a" '(org-agenda :wk "Org agenda")
  "m e" '(org-export-dispatch :wk "Org export dispatch")
  "m i" '(org-toggle-item :wk "Org toggle item")
  "m t" '(org-todo :wk "Org todo")
  "m B" '(org-babel-tangle :wk "Org babel tangle")
  "m T" '(org-todo-list :wk "Org todo list"))
(leader-key
  "m b" '(:ignore t :wk "Tables")
  "m b -" '(org-table-insert-hline :wk "Insert hline in table"))

(leader-key
  "m d" '(:ignore t :wk "Date/deadline")
  "m d t" '(org-time-stamp :wk "Org time stamp"))

(leader-key
  "m i" '(org-toggle-inline-images :wk "Toggle inline image"))
#+end_src
** consult
#+begin_src emacs-lisp
(leader-key
  "x" '(:ignore t :wk "Consult")
  "x b" '(consult-buffer :wk "consult buffer")
  "x y" '(consult-yank-pop :wk "consult yank pop")
  "x l" '(consult-goto-line :wk "consult goto-line")
  "x f" '(consult-flymake :wk "consult flymake")
  "x i" '(consult-imenu :wk "consult imenu")
  "x g" '(consult-ripgrep :wk "consult ripgre")
  "x x" '(consult-fd :wk "consult find")
  ))
#+end_src
* org
** improve visual
#+begin_src emacs-lisp
(setq org-ellipsis " ▾")
(setq org-src-fontify-natively t)
(setq org-highlight-latex-and-related '(native))
(setq org-startup-folded 'showeverything)
(setq org-startup-with-inline-images t)
(setq org-image-actual-width 300)
(setq org-fontify-whole-heading-line t)
(setq org-pretty-entities t)
(setq org-hide-emphasis-markers t)
(setq org-adapt-indentation t)
(setq org-startup-indented t)
(setq org-special-ctrl-a/e '(t . nil))
(setq org-special-ctrl-k t)
(setq org-fontify-quote-and-verse-blocks t)
(setq org-src-tab-acts-natively t)
(setq org-edit-src-content-indentation 2)
(setq org-hide-block-startup nil)
(setq org-src-preserve-indentation nil)
(setq org-startup-folded 'fold)
(setq org-cycle-separator-lines 2)
(setq org-goto-auto-isearch nil)
(setq org-log-done 'time)
(setq org-log-into-drawer t)
#+end_src
** interaction
#+begin_src emacs-lisp
(setq org-cycle-separator-lines 1)
(setq org-catch-invisible-edits 'show-and-error)
(setq org-src-tab-acts-natively t)
#+end_src
** todo keyword 
#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)" "CRITICAL(c)" "|" "DONE(d)")
          (sequence
           "DROP(o)"
           "HIGH(h)"
           "MEDIUM(m)"
           "LOW(l)"
           "WORK-IN-PROGRESS(w)"
           "POSTPONE(p)")))

  (setq org-todo-keyword-faces
        '(("TODO"
           :inherit (region org-todo)
           :foreground "DarkOrange1"
           :weight bold)
          ("CRITICAL"
           :inherit (region org-todo)
           :foreground "white smoke"
           :background "dark red"
           :weight bold)
          ("HIGH"
           :inherit (region org-todo)
           :foreground "white smoke"
           :background "red"
           :weight bold)
          ("MEDIUM"
           :inherit (region org-todo)
           :foreground "white smoke"
           :background "firebrick"
           :weight bold)
          ("LOW"
           :inherit (region org-todo)
           :foreground "white smoke"
           :background "indian red"
           :weight bold)
          ("FALSE POSITIVE"
           :inherit (region org-todo)
           :foreground "gray9"
           :background "coral"
           :weight bold)
          ("DUP"
           :inherit (org-todo region)
           :foreground "tan2"
           :weight bold)
          ("POC"
           :inherit (org-todo region)
           :foreground "MediumPurple2"
           :weight bold)
          ("WIP"
           :inherit (org-todo region)
           :foreground "magenta3"
           :weight bold)
          ("REPORTED"
           :inherit (region org-todo)
           :foreground "DarkGoldenrod2"
           :weight bold)
          ("VALIDATE"
           :inherit (region org-todo)
           :foreground "SpringGreen2"
           :weight bold)
          ("DONE" . "SeaGreen4")))
#+end_src
** tags setting
#+begin_src emacs-lisp
(setq org-tags-column -1)
#+end_src
** priorities 
#+begin_src emacs-lisp
(setq org-lowest-priority ?F)
(setq org-default-priority ?E)

(setq org-priority-faces
      '((65 . "red2")
        (66 . "Gold1")
        (67 . "Goldenrod2")
        (68 . "PaleTurquoise3")
        (69 . "DarkSlateGray4")
        (70 . "PaleTurquoise4")))
#+end_src
** table of contents
#+begin_src emacs-lisp
(use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src
** org-modern
#+begin_src emacs-lisp
  (use-package org-modern
    :hook (org-mode . org-modern-mode)
    :config
    (setq
     ;; org-modern-star '("●" "○" "✸" "✿")
     org-modern-star '("⌾" "✸" "◈" "✿")
     org-modern-list '((42 . "◦") (43 . "•") (45 . "–"))
     org-modern-tag nil
     org-modern-priority nil
     org-modern-todo nil
     org-modern-table nil
     org-modern-variable-pitch nil
     org-modern-block-fringe nil))
#+end_src
** evil-org 
#+begin_src emacs-lisp
(use-package evil-org
  :ensure t
  :after org
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys)
  (add-hook 'org-mode-hook (lambda () (evil-org-mode 1))))
#+end_src
** org-tempo 
#+begin_src emacs-lisp
(require 'org-tempo) 
#+end_src
** org-agenda
#+begin_src emacs-lisp 
  (setq org-agenda-files '("~/todos/tasks.org"))
#+end_src
* misc
** diminish
#+begin_src emacs-lisp
(use-package diminish)
#+end_src
** rainbow mode
#+begin_src emacs-lisp
(use-package rainbow-mode
 :diminish
 :hook org-mode prog-mode) 
#+end_src
** center cursor
#+begin_src emacs-lisp
(use-package centered-cursor-mode :diminish centered-cursor-mode)
#+end_src
** icon
#+begin_src emacs-lisp
(use-package nerd-icons-completion
  :after marginalia
  :config (nerd-icons-completion-mode)
  (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))
#+end_src
** utf-8
#+begin_src emacs-lisp
(when (fboundp 'set-charset-priority)
  (set-charset-priority 'unicode))
(prefer-coding-system 'utf-8)
(setq locale-coding-system 'utf-8)
#+end_src
** zoom
#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src
** transparency
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(alpha-background . 90))
#+end_src
** extra
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
;; use primary as clipboard
(setq-default x-select-enable-primary t)
;; avoid leaving a gap between the frame and the screen
(setq-default frame-resize-pixelwise t)

;; Vim like scrolling
(setq
 scroll-step 1
 scroll-conservatively 10000
 next-screen-context-lines 5
 ;; move by logical lines rather than visual lines (better for macros)
 line-move-visual nil)
#+end_src
** improve latex
#+begin_src emacs-lisp
(with-eval-after-load 'ox-latex
  (add-to-list
   'org-latex-classes
   '("org-plain-latex"
     "\\documentclass{article}
           [NO-DEFAULT-PACKAGES]
           [PACKAGES]
           [EXTRA]"
     ("\\section{%s}" . "\\section*{%s}")
     ("\\subsection{%s}" . "\\subsection*{%s}")
     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
     ("\\paragraph{%s}" . "\\paragraph*{%s}")
     ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
(setq org-latex-listings 't)
#+end_src
